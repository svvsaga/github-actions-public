name: Publish Terraform plan as artifact
description: Publish Terraform plan as artifact

inputs:
  terraform_dir:
    description: The working directory, e.g. where the Terraform files are located.
    required: true
  plan_bucket:
    description: The GCS bucket where the Terraform plan description will be stored.
    required: true
  plan_prefix:
    description: Folder / prefix to add to the plan description file name in GCS. E.g. "terraform-plans/my-app".
    required: true
  ref:
    description: Which commit, tag or branch to plan terraform from. Defaults to same as workflow is run from if empty.
    required: false
    default: ${{ github.sha }}
  workload_identity_project_id:
    description: The project ID of the workload identity project to use with `gcloud`. Will be used to set the `terraform@<workload_identity_project_id>.iam.gserviceaccount.com` service account.
    required: false
  workload_identity_project_number:
    description: The project number of the workload identity project to use with `gcloud`. Will be used to set workload identity provider to `projects/<workload_identity_project_number>/locations/global/workloadIdentityPools/default/providers/github`.
    required: false
  service_account_key:
    description: Service account key for the Terraform service account. Use either this or Workload Identity Federation.
    required: false
  github_token:
    description: Token used when authenticating with GitHub. Defaults to `github.token`.
    required: false
    default: ${{ github.token }}
  plan_artifact_name:
    description: Name of the plan file to upload to GitHub artifacts. Defaults to "terraform.plan".
    required: false
    default: terraform.plan
  tf_backend_config:
    description: Terraform backend configuration to use. See https://www.terraform.io/docs/language/settings/backends/configuration.html#partial-configuration.
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ inputs.ref }}
        token: ${{ inputs.github_token }}
  
    - name: Read TF and TG versions
      working-directory: .
      shell: bash
      run: |
        echo "TF_VERSION=$(cat .terraform-version | awk '{$1=$1};1')" >> $GITHUB_ENV
        echo "TG_VERSION=$(cat .terragrunt-version | awk '{$1=$1};1')" >> $GITHUB_ENV

    - name: Setup Google Cloud SDK with service account key
      if: ${{ inputs.service_account_key }}
      uses: svvsaga/github-actions-public/setup-gcloud-with-workload-identity@v3.13.0
      with:
        service_account_key: ${{ inputs.service_account_key }}

    - name: Setup Google Cloud SDK with Workload Identity Federation
      if: ${{ !inputs.service_account_key }}
      uses: svvsaga/github-actions-public/setup-gcloud-with-workload-identity@v3.12.2
      with:
        project_id: ${{ inputs.workload_identity_project_id }}
        project_number: ${{ inputs.workload_identity_project_number }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@25ff9d20b92812c1870be23cce4b965c1ea59008
      with:
        terragrunt_version: ${{ env.TG_VERSION }}

    - name: Terragrunt init
      working-directory: ${{ inputs.terraform_dir }}
      shell: bash
      run: test -z "${{ inputs.tf_backend_config }}" && terragrunt init -reconfigure || terragrunt init -reconfigure -backend-config=${{ inputs.tf_backend_config }}

    - name: Create Terraform plan
      working-directory: ${{ inputs.terraform_dir }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: terragrunt plan -no-color -input=false -out="${{ inputs.plan_artifact_name }}"

    - name: Upload plan
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.plan_artifact_name }}
        path: ${{ inputs.terraform_dir }}/${{ inputs.plan_artifact_name }}
        retention-days: 1
        if-no-files-found: error

    - name: Set plan description filename env variable
      working-directory: ${{ inputs.terraform_dir }}
      shell: bash
      run: echo "PLAN_TXT_FILENAME=$(date -u +'%Y-%m-%dT%H%M%SZ')_${{ github.sha }}.plan.txt" >> $GITHUB_ENV

    - name: Render plan description
      working-directory: ${{ inputs.terraform_dir }}
      shell: bash
      run: terragrunt show -no-color ${{ inputs.plan_artifact_name }} > ${{ env.PLAN_TXT_FILENAME }}

    - name: Publish plan description
      id: publish-plan-description
      uses: google-github-actions/upload-cloud-storage@main
      with:
        path: ${{ inputs.terraform_dir }}/${{ env.PLAN_TXT_FILENAME }}
        destination: ${{ inputs.plan_bucket }}/${{ inputs.plan_prefix }}
        gzip: false

    - name: Set whether plan has changes
      id: set-has-changes
      working-directory: ${{ inputs.terraform_dir }}
      shell: bash
      run: grep -q "No changes. Your infrastructure matches the configuration." "${{ env.PLAN_TXT_FILENAME }}" && echo "::set-output name=has_changes::0" && echo "No changes found." || echo "::set-output name=has_changes::1" && echo "Changes found."

outputs:
  has_changes:
    description: Whether the plan has changes.
    value: ${{ toJSON(steps.set-has-changes.outputs.has_changes == 1) }}
  plan_description_url:
    description: Full URL of the plan description.
    value: ${{ steps.publish-plan-description.outputs.uploaded }}
