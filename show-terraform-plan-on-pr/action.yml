name: Show Terraform plan on PR
description: Show Terraform plan on PR

inputs:
  terraform_dir:
    description: The working directory, e.g. where the Terraform files are located.
    required: true
  workload_identity_project_number:
    description: The project number of the project where the workload identity provider exists. Either this or `service_account_key` must be set. If not specified, it will be read from `tf-pr-action-config.json`. Will be used to set workload identity provider to `projects/<workload_identity_project_id>/locations/global/workloadIdentityPools/default/providers/github`.
    required: false
    default: ""
  workload_identity_project_id:
    description: The project ID of the workload identity project to use with `gcloud`. If not specified will be read from `tf-pr-action-config.json`. Will be used to set the `terraform@<workload_identity_project_id>.iam.gserviceaccount.com` service account.
    required: false
    default: ""
  service_account_key:
    description: Terraform Service Account private key to use with `gcloud`. If not specified, will be read from 'tf-pr-action-config.json'. Either this or Workload Identity must be set.
    required: false
    default: ""
  github_token:
    description: Token used when authenticating with GitHub. Defaults to `github.token`.
    required: false
    default: ${{ github.token }}
  secrets_json:
    description: JSON string containing secrets to pass to Terraform.
    required: false
    default: "{}"

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ inputs.github_token }}

    - name: Read Terraform config
      id: read-terraform-config
      uses: svvsaga/github-actions-public/read-terraform-config@v3.11.0
      with:
        cwd: ${{ inputs.terraform_dir }}
        secrets_json: ${{ inputs.secrets_json }}

    - name: Setup Google Cloud SDK with service account key
      if: ${{ inputs.service_account_key || steps.read-terraform-config.outputs.sa_secret_key }}
      uses: svvsaga/github-actions-public/setup-gcloud-with-json-key@v3.13.0
      with:
        service_account_key: ${{ inputs.service_account_key || steps.read-terraform-config.outputs.sa_secret_key }}

    - name: Setup Google Cloud SDK with Workload Identity Federation
      if: ${{ !(inputs.service_account_key || steps.read-terraform-config.outputs.sa_secret_key) }}
      uses: svvsaga/github-actions-public/setup-gcloud-with-workload-identity@v3.12.2
      with:
        project_id: ${{ inputs.project_id || steps.read-terraform-config.outputs.workload_identity_project_id }}
        project_number: ${{ inputs.project_number || steps.read-terraform-config.outputs.workload_identity_project_number }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ steps.read-terraform-config.outputs.tf_version }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@25ff9d20b92812c1870be23cce4b965c1ea59008
      with:
        terragrunt_version: ${{ steps.read-terraform-config.outputs.tg_version }}

    - name: Terraform init dependencies
      uses: actions/github-script@v5
      env:
        DEPENDENCIES: ${{ steps.read-terraform-config.outputs.tg_dependencies }}
        ENVIRONMENT: ${{ steps.read-terraform-config.outputs.environment }}
        CWD: ${{ inputs.terraform_dir }}
      with:
        script: |
          const path = require('path')
          const dependencies = process.env.DEPENDENCIES && JSON.parse(process.env.DEPENDENCIES);
          const environment = process.env.ENVIRONMENT;
          const cwd = process.env.CWD;
          const env = process.env;
          env.TF_INPUT = 'false'
          if (dependencies && dependencies.length > 0) {
            const args = [
              'init',
              '-reconfigure'
            ]
            if (environment) {
              args.push(`-backend-config=environments/${environment}-backend-config.hcl`)
            }
            for (const dependency of dependencies) {
              console.log("cwd", cwd, "dependency", dependency)
              const resolved = path.resolve(cwd, dependency)
              console.log("resolved", resolved)
              await exec.exec('terragrunt', args, {
                env,
                cwd: resolved,
                ignoreReturnCode: true
              });
            }
          }

    - name: Terraform init
      working-directory: ${{ inputs.terraform_dir }}
      id: init
      shell: bash
      env:
        ENVIRONMENT: ${{ steps.read-terraform-config.outputs.environment }}
        TF_INPUT: 'false'
      run: |
        if [ -n "$ENVIRONMENT" ]; then
          terragrunt init -backend-config="environments/${ENVIRONMENT}-backend-config.hcl" && echo "INIT_OUTCOME=success" >> $GITHUB_ENV || echo "INIT_OUTCOME=failure" >> $GITHUB_ENV
        else
          terragrunt init && echo "INIT_OUTCOME=success" >> $GITHUB_ENV || echo "INIT_OUTCOME=failure" >> $GITHUB_ENV
        fi

    - name: Terraform format
      working-directory: ${{ inputs.terraform_dir }}
      id: fmt
      shell: bash
      run: terragrunt fmt -check -diff -recursive && echo "FMT_OUTCOME=success" >> $GITHUB_ENV || echo "FMT_OUTCOME=failure" >> $GITHUB_ENV

    - name: Terraform plan
      working-directory: ${{ inputs.terraform_dir }}
      id: plan
      shell: bash
      env:
        ENVIRONMENT: ${{ steps.read-terraform-config.outputs.environment }}
        TF_VARS: ${{ steps.read-terraform-config.outputs.tf_vars }}
        TF_INPUT: 'false'
      run: |
        if [ -n "$TF_VARS" ]; then
          echo "$TF_VARS" > extra.auto.tfvars.json
        fi
        if [ -n "$ENVIRONMENT" ]; then
          terragrunt plan -no-color -var-file="environments/$ENVIRONMENT.tfvars" -out="tf.plan"
        else
          terragrunt plan -no-color -out="tf.plan"
        fi
        echo 'PLAN<<EOF' >> $GITHUB_ENV
        terragrunt show -no-color tf.plan >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV && echo "PLAN_OUTCOME=success" >> $GITHUB_ENV || echo "PLAN_OUTCOME=failure" >> $GITHUB_ENV

    - name: Show Terraform status
      uses: actions/github-script@v3
      with:
        github-token: ${{ github.token }}
        script: |
          const plan = process.env.PLAN
          const output = `
          <h1>${{ inputs.terraform_dir == '.' && 'root' || inputs.terraform_dir }}</h1>

          #### Terraform Format and Style üñå\`${{ env.FMT_OUTCOME == 'success' && '‚úÖ' || env.FMT_OUTCOME == 'failure' && '‚ùå' }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ env.INIT_OUTCOME == 'success' && '‚úÖ' || env.INIT_OUTCOME == 'failure' && '‚ùå' }}\`
          #### Terraform Plan üìñ\`${{ env.PLAN_OUTCOME == 'success' && '‚úÖ' || env.PLAN_OUTCOME == 'failure' && '‚ùå' }}\`


          <details><summary>Show Plan</summary>

          \`\`\`terraform\n${plan}\n\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
