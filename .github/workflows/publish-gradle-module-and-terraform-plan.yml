name: Publish gradle shadowjar module and terraform plan

on:
  workflow_call:
    inputs:
      app_id:
        required: true
        type: string
        description: Identifier of the app, used to create the release name. Use lowercase, dashes and numbers only.
      app_root:
        required: true
        type: string
        description: Relative path to the app to deploy, in which the gradle module and terraform folder exists.
      artifact_bucket:
        required: false
        type: string
        description: GCS storage bucket where gradle module should be uploaded. If not set, attempts to use project ID from `projects.config.json` in shared_project_config_root.
      artifact_destination_path:
        description: Path within storage bucket where to upload artifact. Defaults to `app_root`.
        type: string
        required: false
        default: ""
      publish_glob:
        description: Glob pattern to match artifacts to publish. Defaults to `*.zip`.
        type: string
        required: false
        default: "*.zip"
      version_property:
        description: Project property used to set app version.
        required: false
        type: string
        default: appVersion
      app_version:
        description: Will set the app version of the JAR to be built and published.
        required: false
        type: string
        default: ${{ github.run_number }}
      ref:
        description: Which ref to create release for. Defaults to same as workflow is run from if empty.
        required: false
        type: string
        default: ${{ github.sha }}
      shared_project_config_root:
        description: Relative path to the shared project config root (where the projects.config.json for the team shared project can be found). Defaults to repo root.
        type: string
        required: false
        default: "."

    secrets:
      artifact_publisher_key:
        description: Service account key used to publish JAR to artifact bucket. If not set, attempts to use Workload Identity Federation with shared project ID from `projects.config.json` in shared_project_config_root.
        required: false
      github_app_private_key:
        description: Private key for GitHub application to get app token.
        required: true
      github_app_id:
        description: GitHub application ID to get app token.
        required: true
      terraform_vars:
        description: Additional variables for Terraform in .tfvar-format with quotes escaped and newlines, e.g. 'foo = \"abc\"\nbar = \"def\"'.
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REF: ${{ inputs.ref || github.sha }}

permissions:
  contents: write
  id-token: write

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@c9b46fe7aad9f02afd89b12450b780f52dacfb2d
        with:
          tag_name: ${{ inputs.app_id }}-v${{ inputs.app_version }}
          target_commitish: ${{ env.REF }}
          generate_release_notes: true
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}

  read_config:
    name: Read shared project config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Read project config
        id: read_config
        uses: svvsaga/github-actions-public/read-project-config@v20.1.1
        with:
          cwd: ${{ inputs.app_root }}

      - name: Read shared project config
        id: read_shared_config
        uses: svvsaga/github-actions-public/read-project-config@v20.1.1
        with:
          cwd: ${{ inputs.shared_project_config_root }}

    outputs:
      matrix: ${{ steps.read_config.outputs.matrix }}
      shared_project_config: ${{ steps.read_shared_config.outputs.project_ids_by_environment }}

  build_module:
    name: Build module and publish
    runs-on: ubuntu-latest
    needs: [ read_config ]
    defaults:
      run:
        working-directory: ${{ inputs.app_root }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF }}

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Build module
        uses: gradle/gradle-build-action@v2
        with:
          arguments: shadowJar -P${{ inputs.version_property }}=${{ inputs.app_version }}
          build-root-directory: ${{ inputs.app_root }}
          gradle-version: current

      - name: Zip jars
        run: find . -type f -name "*.jar" -exec bash -c 'zip -j `basename {}`.zip {}' \;

      - name: Setup Google Cloud SDK
        uses: svvsaga/github-actions-public/setup-gcloud@v20.1.1
        with:
          app_root: ${{ inputs.shared_project_config_root }}
          environment: SHARED
          service_account_key: ${{ secrets.artifact_publisher_key }}

      - name: Publish to GCS
        uses: google-github-actions/upload-cloud-storage@v0
        env:
          ARTIFACT_BUCKET: ${{ inputs.artifact_bucket || format('{0}-artifacts', fromJson(needs.read_config.outputs.shared_project_config).SHARED) }}
          ARTIFACT_PREFIX: ${{ inputs.artifact_destination_path || inputs.app_root }}
        with:
          path: ${{ inputs.app_root }}
          destination: ${{ env.ARTIFACT_BUCKET }}/${{ env.ARTIFACT_PREFIX }}
          glob: ${{ inputs.publish_glob }}
          parent: false
          gzip: false

  publish_plans:
    name: Publish Terraform plans
    runs-on: ubuntu-latest
    needs: [ create_release, read_config ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.read_config.outputs.matrix) }}
    env:
      PLAN_BUCKET: ${{ format('svv-{0}', matrix.project_id) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Google Cloud SDK
        uses: svvsaga/github-actions-public/setup-gcloud@v20.1.1
        with:
          app_root: ${{ inputs.app_root }}
          environment: ${{ matrix.environment }}

      - name: Get app token
        id: get_token
        uses: tibdex/github-app-token@v1
        with:
          private_key: ${{ secrets.github_app_private_key }}
          app_id: ${{ secrets.github_app_id }}

      - name: Set GitHub token
        run: |
          git config --global url."https://x-access-token:${{ steps.get_token.outputs.token }}@github.com".insteadOf https://github.com
          echo "GITHUB_TOKEN=${{ steps.get_token.outputs.token }}" >> $GITHUB_ENV

      - name: Publish plan for ${{ matrix.environment }}
        uses: svvsaga/github-actions-public/publish-terraform-plan-to-gcs@v20.1.1
        with:
          environment: ${{ matrix.environment }}
          project_root: ${{ inputs.app_root }}
          storage_bucket: ${{ env.PLAN_BUCKET }}
          release_id: ${{ needs.create_release.outputs.release_id }}
          terraform_vars: ${{ secrets.terraform_vars }}
