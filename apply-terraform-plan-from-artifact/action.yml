name: Apply Terraform plan from artifact
description: Apply Terraform plan from artifact in previous job

inputs:
  terraform_dir:
    description: The working directory, e.g. where the Terraform files are located.
    required: true
  ref:
    description: Which commit, tag or branch to plan terraform from. Defaults to same as workflow is run from if empty.
    required: false
    default: ${{ github.sha }}
  service_account_key:
    description: Service account key for the Terraform service account. Use either this or Workload Identity Federation.
    required: false
  environment:
    description: STM, ATM, PROD or SHARED. Used to setup Workload Identity Federation. Must be set if service_account_key is not set.
    required: false
  github_token:
    description: Token used when authenticating with GitHub. Defaults to `github.token`.
    required: false
    default: ${{ github.token }}
  plan_artifact_name:
    description: Name of the plan file to download from GitHub artifacts. Defaults to "terraform.plan".
    required: false
    default: terraform.plan
  tf_backend_config:
    description: Terraform backend configuration to use. See https://www.terraform.io/docs/language/settings/backends/configuration.html#partial-configuration.
    required: false

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.ref }}
        token: ${{ inputs.github_token }}

    - name: Check if plan exists
      id: check-plan
      uses: svvsaga/artifact-exists-action@master
      with:
        name: ${{ inputs.plan_artifact_name }}

    - name: Download plan
      uses: actions/download-artifact@v3
      if: ${{ steps.check-plan.outputs.exists == 'true' }}
      with:
        name: ${{ inputs.plan_artifact_name }}
        path: ${{ inputs.terraform_dir }}

    - name: Read TF and TG versions
      working-directory: .
      shell: bash
      if: ${{ steps.check-plan.outputs.exists == 'true' }}
      run: |
        echo "TF_VERSION=$(cat .terraform-version | awk '{$1=$1};1')" >> $GITHUB_ENV
        echo "TG_VERSION=$(cat .terragrunt-version | awk '{$1=$1};1')" >> $GITHUB_ENV
        echo TF_INPUT=false >> $GITHUB_ENV

    - name: Setup Google Cloud SDK
      if: ${{ steps.check-plan.outputs.exists == 'true' }}
      uses: svvsaga/github-actions-public/setup-gcloud@v20.1.1
      with:
        service_account_key: ${{ inputs.service_account_key }}
        app_root: ${{ inputs.terraform_dir }}
        environment: ${{ inputs.environment }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      if: ${{ steps.check-plan.outputs.exists == 'true' }}
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      uses: svvsaga/action-terragrunt@v1.2.0
      if: ${{ steps.check-plan.outputs.exists == 'true' }}
      with:
        terragrunt_version: ${{ env.TG_VERSION }}

    - name: Terragrunt init
      if: ${{ steps.check-plan.outputs.exists == 'true' }}
      working-directory: ${{ inputs.terraform_dir }}
      shell: bash
      run: test -z "${{ inputs.tf_backend_config }}" && terragrunt init -reconfigure || terragrunt init -reconfigure -backend-config=${{ inputs.tf_backend_config }}

    - name: Terragrunt apply
      if: ${{ steps.check-plan.outputs.exists == 'true' }}
      working-directory: ${{ inputs.terraform_dir }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: terragrunt apply -input=false -no-color -auto-approve ${{ inputs.plan_artifact_name }}
